class Solution {
     ArrayList<Integer> ar =new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        
       
        if(root==null)
            return ar;
        
        ar.add(root.val);
        preorderTraversal(root.left);
        preorderTraversal(root.right);
        
        return ar;
        
        
    }
}

class Solution {
     ArrayList<Integer> ar =new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
       
        if(root==null)
            return ar;
        
        
        postorderTraversal(root.left);
        postorderTraversal(root.right);
        ar.add(root.val);
        
        return ar;
        
        
    }
}
class EquilibriumPoint {

    // Function to find equilibrium point
    // a: input array
    // n: size of array
    public static int equilibriumPoint(long arr[], int n) {

    if(n==1)
    return n;
    
    int sum=0;
    int result=0;
    int leftSum=0;
    boolean flag=false;
    for(int i=0;i<arr.length;i++)
    sum+=arr[i];
    
    for(int i=0;i<arr.length;i++)
    {
        sum-=arr[i];
        
        if(leftSum==sum)
            return i+1;
            
        leftSum+=arr[i];
    }
    
    return -1;
    }
}
class Solution {
    public boolean isPalindrome(String s) {
        
        s=s.toLowerCase();
        
        String k="";
        
        for(int i=0;i<s.length();i++)
        {
            if(Character.isLetterOrDigit(s.charAt(i)))
                k+=s.charAt(i);
        }
        
        String reverse="";
        
        for(int i=k.length()-1;i>=0;i--)
            reverse+=k.charAt(i);
        
        if(reverse.equals(k))
            return true;
        
        return false;
        
    }
}
