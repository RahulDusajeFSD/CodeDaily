2119. A Number After a Double Reversal - Easy

Code:

class Solution {
    public boolean isSameAfterReversals(int num) {
        
        int reversed1 = reverseNumber(num);
        int reversed2= reverseNumber(reversed1);

        return num == reversed2;
       
    }

    public int reverseNumber(int num){
        int result = 0;

         while(num != 0){

            int k = num%10;

            result = result*10 + k;

            num = num/10;

        }

        return result;
    }
}






191. Number of 1 Bits



public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        
       int result=0;
String binary = Integer.toBinaryString(n);   //INTEGER TO BINARY
      
        for(char i:binary.toCharArray()){
            if(i =='1')
            result++;
        }

        return result;
    }
}
