



public class Solution {
    public ListNode deleteDuplicates(ListNode A) {
        
        Map<Integer,Integer> map =new LinkedHashMap<>();
        
        while(A!=null)
        {
            if(!map.containsKey(A.val))
            map.put(A.val,1);
            else
            map.put(A.val,map.get(A.val)+1);
            
            A=A.next;
        }
        
        ListNode res=new ListNode(0);
        ListNode ptrToRes=res;
        
        
        for(Map.Entry<Integer,Integer> entry:map.entrySet())
        {
            if(entry.getValue()==1)
            {
                res.next=new ListNode(entry.getKey());
                res=res.next;
            }
            
            
        }
        
        return ptrToRes.next;
    }
}



public class Solution {

    // Complete the sockMerchant function below.
    static int sockMerchant(int n, int[] ar) {

        int count=0;
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int i=0;i<n;i++)
        {
            if(!map.containsKey(ar[i]))
            map.put(ar[i],1);
            else
            map.put(ar[i],map.get(ar[i])+1);
        }
        
        for(Map.Entry<Integer,Integer> entry:map.entrySet())
        {
            count+=entry.getValue()/2;
        }
        
        return count;

    }
