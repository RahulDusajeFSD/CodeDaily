public class Solution {
    public int solve(ArrayList<String> A) {
        
        double[] a =new double[A.size()];
        
        for(int i=0;i<A.size();i++)
        {
            a[i]=Double.parseDouble(A.get(i));
        }
        double first=a[0];
        for(int i=0;i<a.length-2;i++)
        {
            for(int j=i+1;j<a.length-1;j++)
            {
                for(int k=j+1;k<a.length;k++)
                {
                    if(a[k]+a[j]+a[i] > 1.0 && a[k]+a[j]+a[i] <2.0)
                    return 1;
                }

            }
        }
        
        return 0;
    }
}

//WAVE ARRAY--------- 1)Sort   2)Swap two elements one by one
public class Solution {
    
  
    public ArrayList<Integer> wave(ArrayList<Integer> A) {
        
        int[] a =new int[A.size()];
        
        Collections.sort(A);
        
        for(int i=0;i<A.size();i++)
        a[i]=A.get(i);
        
        
        for(int i=0;i<a.length-1;i+=2)
        {
            int temp=a[i];
            a[i]=a[i+1];
            a[i+1]=temp;
            
        }
        
        ArrayList<Integer> ar= new ArrayList<>();
        for(int i=0;i<a.length;i++)
        ar.add(a[i]);
        
        return ar;
    }
    
}


public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int maximumGap(final List<Integer> A) {
        if(A.size() ==1)
        return 0;
        
        Collections.sort(A);
        PriorityQueue<Integer> pq =new PriorityQueue<>(Collections.reverseOrder());
        
        for(int i=1;i<A.size();i++)
        {
            pq.add(Math.abs(A.get(i)-A.get(i-1)));
        }
        
        return (int)pq.poll();
    }
}
