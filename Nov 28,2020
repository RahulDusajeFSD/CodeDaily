class RearrangeAlternate{
    public static void rearrange(int arr[], int n){
        
    int temp[] = arr.clone();
        
   boolean flag=true;
   
   int small=0;
   int large=n-1;
   
   for(int i=0;i<n;i++)
   {
       if(flag)
       arr[i]=temp[large--];
       else
       arr[i]=temp[small++];
       
       flag=!flag;
   }
        
    }
    
}

class Solution {
    public int maxSubArray(int[] nums) {
        
        if(nums.length==1 && nums[0]<0)
            return nums[0];
        
          
        int max_end_here=0;
        int max_sum_here=Integer.MIN_VALUE;
        
        for(int i=0;i<nums.length;i++)
        {
            
         max_end_here+=nums[i];
            
            if(max_sum_here<max_end_here)
                max_sum_here=max_end_here;
            
        if(max_end_here<=0)
            max_end_here=0;
            
        }
        
        return max_sum_here;
        
    }
}

class Solution {
    ArrayList<Integer> ar =new ArrayList<>();
    
    public List<Integer> inorderTraversal(TreeNode root) {
        if(root==null)
            return ar;
        
        inorderTraversal(root.left);
        ar.add(root.val);
        inorderTraversal(root.right);
        
        return ar;
    }
}
